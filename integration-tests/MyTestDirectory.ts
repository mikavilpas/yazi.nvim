// Note: This file is autogenerated. Do not edit it directly.
//
// Describes the contents of the test directory, which is a blueprint for
// files and directories. Tests can create a unique, safe environment for
// interacting with the contents of such a directory.
//
// Having strong typing for the test directory contents ensures that tests can
// be written with confidence that the files and directories they expect are
// actually found. Otherwise the tests are brittle and can break easily.

import * as z from "zod"

export const MyTestDirectorySchema = z.object({
  name: z.literal("test-environment/"),
  type: z.literal("directory"),
  contents: z.object({
    ".config": z.object({
      name: z.literal(".config/"),
      type: z.literal("directory"),
      contents: z.object({
        nvim: z.object({
          name: z.literal("nvim/"),
          type: z.literal("directory"),
          contents: z.object({
            "init.lua": z.object({
              name: z.literal("init.lua"),
              type: z.literal("file"),
            }),
            lua: z.object({
              name: z.literal("lua/"),
              type: z.literal("directory"),
              contents: z.object({
                "plugins.lua": z.object({
                  name: z.literal("plugins.lua"),
                  type: z.literal("file"),
                }),
              }),
            }),
            "prepare.lua": z.object({
              name: z.literal("prepare.lua"),
              type: z.literal("file"),
            }),
          }),
        }),
        nvim_integrations: z.object({
          name: z.literal("nvim_integrations/"),
          type: z.literal("directory"),
          contents: z.object({
            "init.lua": z.object({
              name: z.literal("init.lua"),
              type: z.literal("file"),
            }),
            lua: z.object({
              name: z.literal("lua/"),
              type: z.literal("directory"),
              contents: z.object({
                "plugins.lua": z.object({
                  name: z.literal("plugins.lua"),
                  type: z.literal("file-symlink"),
                  target: z.literal("../../nvim/lua/plugins.lua"),
                }),
              }),
            }),
            "prepare.lua": z.object({
              name: z.literal("prepare.lua"),
              type: z.literal("file"),
            }),
          }),
        }),
        yazi: z.object({
          name: z.literal("yazi/"),
          type: z.literal("directory"),
          contents: z.object({
            "keymap.toml": z.object({
              name: z.literal("keymap.toml"),
              type: z.literal("file"),
            }),
          }),
        }),
      }),
    }),
    "config-modifications": z.object({
      name: z.literal("config-modifications/"),
      type: z.literal("directory"),
      contents: z.object({
        "accept_lsp_rename_confirmations_immediately.lua": z.object({
          name: z.literal("accept_lsp_rename_confirmations_immediately.lua"),
          type: z.literal("file"),
        }),
        "add_command_to_count_open_buffers.lua": z.object({
          name: z.literal("add_command_to_count_open_buffers.lua"),
          type: z.literal("file"),
        }),
        "add_command_to_reveal_a_file.lua": z.object({
          name: z.literal("add_command_to_reveal_a_file.lua"),
          type: z.literal("file"),
        }),
        "add_command_to_show_loaded_packages.lua": z.object({
          name: z.literal("add_command_to_show_loaded_packages.lua"),
          type: z.literal("file"),
        }),
        "add_yazi_context_assertions.lua": z.object({
          name: z.literal("add_yazi_context_assertions.lua"),
          type: z.literal("file"),
        }),
        "notify_custom_events.lua": z.object({
          name: z.literal("notify_custom_events.lua"),
          type: z.literal("file"),
        }),
        "notify_hover_events.lua": z.object({
          name: z.literal("notify_hover_events.lua"),
          type: z.literal("file"),
        }),
        "notify_rename_events.lua": z.object({
          name: z.literal("notify_rename_events.lua"),
          type: z.literal("file"),
        }),
        "report_loaded_yazi_modules.lua": z.object({
          name: z.literal("report_loaded_yazi_modules.lua"),
          type: z.literal("file"),
        }),
        "use_light_neovim_colorscheme.lua": z.object({
          name: z.literal("use_light_neovim_colorscheme.lua"),
          type: z.literal("file"),
        }),
        yazi_config: z.object({
          name: z.literal("yazi_config/"),
          type: z.literal("directory"),
          contents: z.object({
            "add_hovered_buffer_background.lua": z.object({
              name: z.literal("add_hovered_buffer_background.lua"),
              type: z.literal("file"),
            }),
            "add_keybinding_to_start_yazi_and_find.lua": z.object({
              name: z.literal("add_keybinding_to_start_yazi_and_find.lua"),
              type: z.literal("file"),
            }),
            "disable_a_keybinding.lua": z.object({
              name: z.literal("disable_a_keybinding.lua"),
              type: z.literal("file"),
            }),
            "enable_change_neovim_cwd_on_close.lua": z.object({
              name: z.literal("enable_change_neovim_cwd_on_close.lua"),
              type: z.literal("file"),
            }),
            "highlight_buffers_in_same_directory.lua": z.object({
              name: z.literal("highlight_buffers_in_same_directory.lua"),
              type: z.literal("file"),
            }),
            "log_yazi_closed_successfully.lua": z.object({
              name: z.literal("log_yazi_closed_successfully.lua"),
              type: z.literal("file"),
            }),
            "make_yazi_fullscreen.lua": z.object({
              name: z.literal("make_yazi_fullscreen.lua"),
              type: z.literal("file"),
            }),
            "open_multiple_files.lua": z.object({
              name: z.literal("open_multiple_files.lua"),
              type: z.literal("file"),
            }),
            "resolve_relative_files_from_cwd.lua": z.object({
              name: z.literal("resolve_relative_files_from_cwd.lua"),
              type: z.literal("file"),
            }),
            "set_help_key.lua": z.object({
              name: z.literal("set_help_key.lua"),
              type: z.literal("file"),
            }),
            "use_fzf_lua.lua": z.object({
              name: z.literal("use_fzf_lua.lua"),
              type: z.literal("file"),
            }),
            "use_snacks_picker.lua": z.object({
              name: z.literal("use_snacks_picker.lua"),
              type: z.literal("file"),
            }),
          }),
        }),
      }),
    }),
    "dir with spaces": z.object({
      name: z.literal("dir with spaces/"),
      type: z.literal("directory"),
      contents: z.object({
        "file1.txt": z.object({
          name: z.literal("file1.txt"),
          type: z.literal("file"),
        }),
        "file2.txt": z.object({
          name: z.literal("file2.txt"),
          type: z.literal("file"),
        }),
      }),
    }),
    "file2.txt": z.object({
      name: z.literal("file2.txt"),
      type: z.literal("file"),
    }),
    "file3.txt": z.object({
      name: z.literal("file3.txt"),
      type: z.literal("file"),
    }),
    highlights: z.object({
      name: z.literal("highlights/"),
      type: z.literal("directory"),
      contents: z.object({
        "file_1.txt": z.object({
          name: z.literal("file_1.txt"),
          type: z.literal("file"),
        }),
        "file_2.txt": z.object({
          name: z.literal("file_2.txt"),
          type: z.literal("file"),
        }),
        "file_3.txt": z.object({
          name: z.literal("file_3.txt"),
          type: z.literal("file"),
        }),
      }),
    }),
    "initial-file.txt": z.object({
      name: z.literal("initial-file.txt"),
      type: z.literal("file"),
    }),
    "lua-project": z.object({
      name: z.literal("lua-project/"),
      type: z.literal("directory"),
      contents: z.object({
        ".emmyrc.json": z.object({
          name: z.literal(".emmyrc.json"),
          type: z.literal("file"),
        }),
        lua: z.object({
          name: z.literal("lua/"),
          type: z.literal("directory"),
          contents: z.object({
            "config.lua": z.object({
              name: z.literal("config.lua"),
              type: z.literal("file"),
            }),
            "init.lua": z.object({
              name: z.literal("init.lua"),
              type: z.literal("file"),
            }),
            utils: z.object({
              name: z.literal("utils/"),
              type: z.literal("directory"),
              contents: z.object({
                "utils.lua": z.object({
                  name: z.literal("utils.lua"),
                  type: z.literal("file"),
                }),
              }),
            }),
          }),
        }),
      }),
    }),
    "other-subdirectory": z.object({
      name: z.literal("other-subdirectory/"),
      type: z.literal("directory"),
      contents: z.object({
        "other-sub-file.txt": z.object({
          name: z.literal("other-sub-file.txt"),
          type: z.literal("file"),
        }),
      }),
    }),
    routes: z.object({
      name: z.literal("routes/"),
      type: z.literal("directory"),
      contents: z.object({
        "posts.$postId": z.object({
          name: z.literal("posts.$postId/"),
          type: z.literal("directory"),
          contents: z.object({
            "adjacent-file.txt": z.object({
              name: z.literal("adjacent-file.txt"),
              type: z.literal("file"),
            }),
            "route.tsx": z.object({
              name: z.literal("route.tsx"),
              type: z.literal("file"),
            }),
            "should-be-excluded-file.txt": z.object({
              name: z.literal("should-be-excluded-file.txt"),
              type: z.literal("file"),
            }),
          }),
        }),
      }),
    }),
    subdirectory: z.object({
      name: z.literal("subdirectory/"),
      type: z.literal("directory"),
      contents: z.object({
        "subdirectory-file.txt": z.object({
          name: z.literal("subdirectory-file.txt"),
          type: z.literal("file"),
        }),
      }),
    }),
  }),
})

export const MyTestDirectoryContentsSchema =
  MyTestDirectorySchema.shape.contents
export type MyTestDirectoryContentsSchemaType = z.infer<
  typeof MyTestDirectorySchema
>

export type MyTestDirectory = MyTestDirectoryContentsSchemaType["contents"]

export const testDirectoryFiles = z.enum([
  ".config/nvim/init.lua",
  ".config/nvim/lua/plugins.lua",
  ".config/nvim/lua",
  ".config/nvim/prepare.lua",
  ".config/nvim",
  ".config/nvim_integrations/init.lua",
  ".config/nvim_integrations/lua/plugins.lua",
  ".config/nvim_integrations/lua",
  ".config/nvim_integrations/prepare.lua",
  ".config/nvim_integrations",
  ".config/yazi/keymap.toml",
  ".config/yazi",
  ".config",
  "config-modifications/accept_lsp_rename_confirmations_immediately.lua",
  "config-modifications/add_command_to_count_open_buffers.lua",
  "config-modifications/add_command_to_reveal_a_file.lua",
  "config-modifications/add_command_to_show_loaded_packages.lua",
  "config-modifications/add_yazi_context_assertions.lua",
  "config-modifications/notify_custom_events.lua",
  "config-modifications/notify_hover_events.lua",
  "config-modifications/notify_rename_events.lua",
  "config-modifications/report_loaded_yazi_modules.lua",
  "config-modifications/use_light_neovim_colorscheme.lua",
  "config-modifications/yazi_config/add_hovered_buffer_background.lua",
  "config-modifications/yazi_config/add_keybinding_to_start_yazi_and_find.lua",
  "config-modifications/yazi_config/disable_a_keybinding.lua",
  "config-modifications/yazi_config/enable_change_neovim_cwd_on_close.lua",
  "config-modifications/yazi_config/highlight_buffers_in_same_directory.lua",
  "config-modifications/yazi_config/log_yazi_closed_successfully.lua",
  "config-modifications/yazi_config/make_yazi_fullscreen.lua",
  "config-modifications/yazi_config/open_multiple_files.lua",
  "config-modifications/yazi_config/resolve_relative_files_from_cwd.lua",
  "config-modifications/yazi_config/set_help_key.lua",
  "config-modifications/yazi_config/use_fzf_lua.lua",
  "config-modifications/yazi_config/use_snacks_picker.lua",
  "config-modifications/yazi_config",
  "config-modifications",
  "dir with spaces/file1.txt",
  "dir with spaces/file2.txt",
  "dir with spaces",
  "file2.txt",
  "file3.txt",
  "highlights/file_1.txt",
  "highlights/file_2.txt",
  "highlights/file_3.txt",
  "highlights",
  "initial-file.txt",
  "lua-project/.emmyrc.json",
  "lua-project/lua/config.lua",
  "lua-project/lua/init.lua",
  "lua-project/lua/utils/utils.lua",
  "lua-project/lua/utils",
  "lua-project/lua",
  "lua-project",
  "other-subdirectory/other-sub-file.txt",
  "other-subdirectory",
  "routes/posts.$postId/adjacent-file.txt",
  "routes/posts.$postId/route.tsx",
  "routes/posts.$postId/should-be-excluded-file.txt",
  "routes/posts.$postId",
  "routes",
  "subdirectory/subdirectory-file.txt",
  "subdirectory",
  ".",
])
export type MyTestDirectoryFile = z.infer<typeof testDirectoryFiles>
export type MyNeovimAppName = "nvim" | "nvim_integrations"
